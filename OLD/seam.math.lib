import("stdfaust.lib");
sma = library("seam.math.lib");
sfi = library("seam.filters.lib");
sds = library("seam.discipio.lib");

//======================================================================= PI ===
//==============================================================================
//----------------------------------------------- QUAD PRECISION 81 DECIMALS ---
PIq = 3.14159265358979323846264338327950288419716939937510582097494459230781640;
PIc = atan(1)*4;
// 2pi
twopi = 2*ma.PI;
tau = twopi;
//------------------------------------------------------------------------ e ---
eu = 2.71828182845904523536028747135266249775724709369995957496696762772407663;
ecalc = _ <: (1+(1/_))^_;

//--------------------------------------------------------------------  ---
omega(fc) = fc*twopi/ma.SR;
//------------------------------------------------------- BILINEAR TRANSFORM ---
w(fc) = tan(ma.PI*fc/ma.SR);
//------------------------------------------------------------ SIN^2 - COS^2 ---
cosq(x) = cos(x)*cos(x);
sinq(x) = sin(x)*sin(x);
//======================================================== POLAR | CARTESIAN ===
//==============================================================================
//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
// https://en.wikipedia.org/wiki/Inverse_trigonometric_functions
// https://en.wikipedia.org/wiki/Spherical_coordinate_system
// https://en.wikipedia.org/wiki/Atan2
//------------------------------------------------------- DEGREES TO RADIANS ---
d2r = *(ma.PI/180);
//------------------------------------------------------- RADIANS TO DEGREES ---
r2d = _/ma.PI*180;
//--------------------------------------------------------- AED TO CARTESIAN ---
aed2xyz(a,e,d) = cx(a,e,d), cy(a,e,d), cz(a,e,d)
with{
  cx(a,e,d) = d*(cos(a)*cos(e));
  cy(a,e,d) = d*(sin(a)*cos(e));
  cz(a,e,d) = d*(sin(e));
};
//process = aed2xyz;
//--------------------------------------------------------- CARTESIAN TO AED ---
xyz2aed(x,y,z) = a(x,y),e(x,y,z),d(x,y,z)
with{
  a(x,y)   = atan2(y,x);
  e(x,y,z) = atan2(sqrt(x^2+y^2),z);
  d(x,y,z) = sqrt(x^2+y^2+z^2);
};
//process = xyz2aed(1/sqrt(2),1/sqrt(2),1/sqrt(2)) : r2d, r2d, _ ;
//====================================================================== PHI ===
//==============================================================================
phi = *(1+(sqrt(5)))/2;
// reciprocal o the golden ratio
rphi = *(sqrt(5)-1)/2;
// phi progression
srphi(0,x) = x;
srphi(i,x) = rphi(x) : srphi(i-1);
//process = srphi(16,24000);
//=============================================================== FACTORIALS ===
//==============================================================================
factorial(0) = 1;
factorial(i) = i * factorial(i-1);
permutation(k,n) = factorial(k)/factorial(n);
//=========================================================== SPEED OF SOUND ===
//==============================================================================
esos = 344; // exterior
isos = 331.4; // interior
//-------------------------------------------------------- METERS TO SAMPLES ---
emt2samp(mt) = int(mt*ma.SR/esos);
imt2samp(mt) = int(mt*ma.SR/isos);
//---------------------------------------------------------------- SOFT CLIP ---
softclip(x) = x <: dist1, dist2, dist3 :> _;
    dist1(x) = (x <= -1) * (-2/3);
    dist2(x) = (x >= -1) * (x <= 1) * (x-x^3/3);
    dist3(x) = (x >= 1) * (2/3);
//process = os.osc(100)*1 : softclip